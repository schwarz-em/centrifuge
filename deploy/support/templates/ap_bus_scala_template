package vivadoHLS

import chisel3._
import chisel3.util._

//These are definitions of the bus standards used on Vivado HLS generated accelerators

// Request Packet Format
class ApBusReq(dataWidth: Int, addrWidth: Int) extends Bundle {
  // Req specific lines
  // Specifies a write request
  val din      = Output(Bool()) // req_din in verilog

  // Lines used for req
  val address  = Output(UInt(addrWidth.W))
  val dataout  = Output(UInt(dataWidth.W))
  val size     = Output(UInt(addrWidth.W))
}

// Response Packet Format
class ApBusRsp(dataWidth: Int) extends Bundle {
  val datain   = Input(UInt(dataWidth.W))
}

// Main IO Bundle
class ApBusIO(dataWidth: Int = 64, addrWidth: Int = 32) extends Bundle {
  val req        = new ApBusReq(dataWidth, addrWidth)
  val req_full_n = Input(Bool())  // req_full_n in verilog
  // Write the request
  val req_write  = Output(Bool()) // req_write in verilog

  val rsp        = new ApBusRsp(dataWidth)
  val rsp_empty_n = Input(Bool())
  val rsp_read   = Output(Bool())
}

// Control IO Bundle
class ApCtrlIO(dataWidth: Int = 64) extends Bundle {
  val start = Input(Bool())
  val done  = Output(Bool())
  val idle  = Output(Bool())
  val ready = Output(Bool())
  val rtn   = Output(UInt(dataWidth.W))
}

